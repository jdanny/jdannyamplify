/**
 * Below method accepts filename and returns file content.
 * Here it is called to get Registration form
 */
exports.getHtmlContent = function (fileName) {
    var fs = require('fs');
    var path = require('path');

    filepath = path.join(__dirname, 'staticContent', fileName);
    try {
        var fileData = fs.readFileSync(filepath, 'utf8');
        return fileData;
    } catch (err) {
        console.log("Error :: " + err.stack);
    }
}

/**
 * Below method is used to replace place holders in html file.
 */
exports.replacePlaceholders = function (fileData, min, max) {
    /**
     * One way to Replacing place holder with dynamic value.
    fileData = fileData.toString().replace(/\{\{userId\}\}/, '4501');
    fileData = fileData.toString().replace(/\{\{status\}\}/, 'new');
    */

    /**
     * Another way by using strformat module in npm
     */
    var strformat = require('strformat');
    var replaceWith = {
        userId: Math.floor(Math.random() * (max) + min),
        status: 'new'
    }
    fileData = strformat(fileData, replaceWith);
    return fileData;
}

/**
 * Show Registration form to front end.
 */
exports.showRegistrationForm = function (req, res, dep) {
    var fileContent = dep.getFile.getHtmlContent(dep.config.registrationForm);
    fileContent = dep.getFile.replacePlaceholders(fileContent, dep.config.min, dep.config.max);
    res.writeHead(200, {
        'Content-Type': 'text/html'
    });
    res.write(fileContent);
    res.end();
}

/**
 * Get's form fields
 * Calls POST call to save data to Mongo db.
 */
exports.getFormDataAndCallRegService = function (req, res, dep) {
    //console.log("Submitting form....")
    var fields = {};
    var form = dep.formidable.IncomingForm();
    form.on('field', function (field, value) {
        fields[field] = value;
    });
    form.on('end', function () {
       postCall(res, fields, dep)
    });
    form.parse(req);
}

//POST service call to registartion API
function postCall(res, fields, dep) {
    var Client = dep.noderestclient.Client;
    var client = new Client();

    var args = {
        headers: {
            'Content-Type': "application/json"
        },
        data: fields
    };
    
    var reqUrl = dep.config.http + dep.config.host + ':' + dep.config.port + dep.config.regApiPath;
    client.registerMethod(dep.config.registerNewUser, reqUrl, "POST");

    client.methods.registerNewUser(args, function (data, response) {
        res.writeHead(200, {
            'Content-Type': 'text/html'
        });
        res.write('<h1>User created successfully and below is the response data..</h1>');
        res.write("<fieldset><legend>UserDetails...</legend>");
        res.end(JSON.stringify(data, null, 4) + "</fieldset>");
    });
}